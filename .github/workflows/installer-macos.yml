on:
  pull_request:
  release:
    types:
      - created

name: Create macOS App Bundle and DMG

jobs:
  build:
    name: macOS App Bundle
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: ['Lite', 'Full']
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./installers/macOS
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      DMGNAME: ${{ matrix.build_type == 'Lite' && 'Spyder-Lite.dmg' || 'Spyder.dmg' }}
      DMGPATH: installers/macOS/dist/${{ matrix.build_type == 'Lite' && 'Spyder-Lite.dmg' || 'Spyder.dmg' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
#      - name: Install Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.7.9
      - name: Install Dependencies
        run: |
          SPK_REPO=${GITHUB_WORKSPACE}/external-deps/spyder-kernels
          PLS_REPO=${GITHUB_WORKSPACE}/external-deps/python-language-server
          INSTALL_FLAGS=()
          if [[ ${BUILD_TYPE} == 'Full' ]]; then
              INSTALL_FLAGS+=('-r' 'req-extras.txt')
          fi
          if [[ ${GITHUB_EVENT_NAME} == 'pull_request' ]]; then
              INSTALL_FLAGS+=('-e' ${SPK_REPO} '-e' ${PLS_REPO})
          fi
          pip3 install -c req-const.txt -r req-build.txt "${INSTALL_FLAGS[@]}" -e ${GITHUB_WORKSPACE}
          pip3 uninstall -q -y spyder
      - name: Build Application Bundle
        run: python3 setup.py ${BUILD_FLAG} --dmg py2app
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.DMGPATH }}
          name: ${{ env.DMGNAME }}
      - name: Get Release
        if: ${{github.event_name == 'release'}}
        id: get_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        uses: bruceadams/get-release@v1.2.0
      - name: Upload Release Asset
        if: ${{github.event_name == 'release'}}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.DMGPATH }}
          asset_name: ${{ env.DMGNAME }}
          asset_content_type: application/x-apple-diskimage
