on:
  pull_request:
  release:
    types:
      - created

name: Create macOS App Bundle and DMG

jobs:
  build:
    name: macOS App Bundle
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: ['Lite', 'Full']
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./installers/macOS
    env:
      SPY_REPO: ${{ github.workspace }}
      SPK_REPO: ${{ github.workspace }}/external-deps/spyder-kernels
      PLS_REPO: ${{ github.workspace }}/external-deps/python-language-server
      BUILD_TYPE: ${{ matrix.build_type }}
      EVENT_NAME: ${{ github.event_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set Build Variables
        run: |
          # Set build type flag and disk image name
          if [[ ${BUILD_TYPE} == "Lite" ]]; then
              echo "BFLAG=--lite" >> $GITHUB_ENV
              echo "DMGNAME=Spyder-Lite.dmg" >> $GITHUB_ENV
          elif [[ ${BUILD_TYPE} == "Full" ]]; then
              echo "BFLAG=" >> $GITHUB_ENV
              echo "DMGNAME=Spyder.dmg" >> $GITHUB_ENV
          fi
          # Set subrepo install flags
          if [[ ${EVENT_NAME} == 'release' ]]; then
              echo "SUBREPO_FLAGS='-e ${SPK_REPO} -e ${PLS_REPO}'" >> $GITHUB_ENV
          elif [[ ${EVENT_NAME} == 'pull_request' ]]; then
              echo "SUBREPO_FLAGS="
          fi
#      - name: Install Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.7.9
      - name: Install Dependencies
        run: |
          printenv | sort
          echo ${BUILD_TYPE}
          echo ${SPY_REPO}
          echo ${BFLAG}
          echo ${DMGNAME}
          echo ${SUBREPO_FLAGS}
#          is there a better way to install only spyder dependents?
#          pip3 install -r req-build.txt -r req-extras.txt -c req-const.txt ${SUBREPO_FLAGS} -e ${SPY_REPO}
#          pip3 uninstall -q -y spyder
#      - name: Build Application Bundle
#        run: python3 setup.py ${BFLAG} --dmg py2app
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          path: installers/macOS/dist/env.DMGNAME
#          name: env.DMGNAME
#      - name: Get Release
#        if: ${{github.event_name == 'release'}}
#        id: get_release
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        uses: bruceadams/get-release@v1.2.0
#      - name: Upload Release Asset
#        if: ${{github.event_name == 'release'}}
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }}
#          asset_path: installers/macOS/dist/env.DMGNAME
#          asset_name: env.DMGNAME
#          asset_content_type: application/x-apple-diskimage
